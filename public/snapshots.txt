APP.JS


import React, {useState, useCallback, useEffect} from "react";
import * as d3 from "d3";
import { useData } from "../SalesAnalysis/useData";
import { AxisBottom } from "../SalesAnalysis/AxisBottom";
import Dropdown from 'react-dropdown';
import { YAxis } from "../SalesAnalysis/Y-Axis";
import { Marks } from "../SalesAnalysis/Marks";
// import { Dropdown } from "../SalesAnalysis/dropdown";


console.log(d3);

const width = 1100;
const height = 500;
const margin = {top: 0, right: 0, bottom: 20, left: 350};
const innerHeight = height - margin.top - margin.bottom;
const innerWidth = width - margin.left -  margin.right;

const xAxisLabelOffset = 5; //SET A NEW VARIABLE TO MANIPULATE X-AXIS
const yAxisLabelOffset = 10;

const fadeOpacity = 0.2;

//WE ARE GOING TO CREATE A FUNCTION SO WE CAN ACCESS THESE ATTRIBUTES PROGRAMMATICALLY
const attributes = [
  {value: 'Trading As', label:'Trading As'},
  {value: 'Volume 2022', label:'Volumes 2022'},
  {value: 'Revenue 2023', label:'Revenue 2023'},
  {value: 'Volumes 2023', label:'Volumes 2023'},
  {value: 'species', label:'Species'}
]

////THIS FUNCTION WILL TAKE AS INPUT A VALUE AND RETURN A LABEL
const getLabel = value => {
  for(let i = 0; i < attributes.length; i++) {
   if(attributes[i].value === value){
    return attributes[i].label;
   }
  }
};


const App = () => { 
  const data = useData();         
  const [hoveredValue, setHoveredValue] = useState(null);
  
  //Logic for X (MENU)
  const initialXAttribute = 'Revenue 2023';
  const [xAttribute, setXAttribute] = useState(initialXAttribute);
  const xValue = d => d[xAttribute];
  const xAxisLabel = getLabel(xAttribute);

    //Logic for Y (MENU)
  const initialYAttribute = 'Trading As';
  const [yAttribute, setYAttribute] = useState(initialYAttribute);
  const yValue = d => d[yAttribute];
  const yAxisLabel = getLabel(yAttribute);

  
  
 
  if(!data) {
    return <pre>Loading...</pre>
  }
  

  const yScale = d3.scaleBand()
  .domain(data.map(d => d['Trading As']))   
  .range([0, innerHeight]);
  
     
  const xScale = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.Revenue)])
    .range([0, innerWidth]);

  return (

<>
    <div className="newDropdown">          
      <div className="X-Axis">
        <span className="dropdown-label">X-Axis</span>
            <Dropdown
              options={attributes} 
              value ={xAttribute} 
              onChange = {({value}) => setXAttribute(value)} 
          
            />
      </div>

        <div className="Y-Axis">
          <span className="dropdown-label">Y-Axis</span>
            <Dropdown
              options={attributes} 
              value ={yAttribute} 
              onChange = {({value}) => setYAttribute(value)}
            />
        </div>
  </div>

      <div className="move">
        <svg width={width} height={height}>

            <g transform={`translate(${margin.left}, ${margin.top})`}>
            <AxisBottom xScale={xScale} innerHeight={innerHeight} />
              <text className = "axis-Label"
                textAnchor="middle"
                transform={`translate(${-yAxisLabelOffset}, ${innerHeight / 2}) rotate(-90)`}
                > 
                {yAxisLabel}
              </text> 
              
                <YAxis yScale={yScale}/>

                <text className = "axis-Label" 
                  x={innerWidth / 2}
                  y={innerHeight + xAxisLabelOffset + 20} 
                  textAnchor="middle"> 
                {xAxisLabel}
                </text> 
                <g opacity={hoveredValue? fadeOpacity : 1}>
                <Marks 
                  xValue={xValue}
                  xScale={xScale} 
                  yScale={yScale} 
                  yValue={yValue}
                  data={data} />  
              </g>
            </g>

          </svg>
      </div>
  </>
   );
};

export default App;   


INDEX.HTML

<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Rosh Project</title>
  <link rel="shortcut icon" type="image/jpg" href="./favicon/rosh.jpg"/>
   <link rel="stylesheet" type="text/css" href="./style.css" />
   <link rel="stylesheet" type="text/css" href="./style2.css" />
   <!-- <script src="https://unpkg.com/topojson@3.0.2/dist/topojson.min.js"> </script> -->
   
</head>
<body>
  <nav class="menu-bar">Menu
        <div class="menu-dropdown">
          <a title="home" href=""></a>
          <a title="home" href=""></a>
          <a title="home" href=""></a>
        </div>
  </nav>
  <nav class="search">
    <input class="search-input" type="text" placeholder="search">
  </nav>
   <div class="container">
      <div class="four" id="root">4</div> 
      <div class="five">5</div>

      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
   </div>
  
   <div class="foot">
    <footer>roahjay granville</footer>
  </div>
   

    <pre id="messageContainer"></pre>
    <script src="./bundle.js"></script>

</body>
</html>


PARSE

Using FileReader (Vanilla JavaScript): You can use the FileReader API to read the contents of a CSV file and then parse it into an array. Hereâ€™s an example:
JavaScript

<input type="file" id="fileInput">
<pre id="fileDisplayArea"></pre>
<button onClick="parseCSV()">Show Text</button>

<script>
  function parseCSV() {
    const fileInput = document.getElementById("fileInput");
    const file = fileInput.files[0];
    const textType = /text.*/;
    const csvType = "text/csv"; // Correct MIME type for CSV files

    if (file.type.match(csvType)) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const csvData = reader.result;
        const rows = csvData.split("\n"); // Split into lines
        const dataArray = rows.map((row) => row.split(",")); // Split each column
        console.log(dataArray); // Your CSV data as an array
      };
      reader.readAsText(file);
    } else {
      document.getElementById("fileDisplayArea").innerText =
        "File not supported!";
    }
  }
</script>
AI-generated code. Review and use carefully. More info on FAQ.
Using External Libraries: There are libraries like PapaParse that simplify CSV parsing. You can include the library in your project and use it as follows:
JavaScript

// Install PapaParse via npm or include it directly in your HTML
// npm install papaparse

import Papa from "papaparse";

const csvFilePath = "data.csv"; // Path to your CSV file
Papa.parse(csvFilePath, {
  header: true, // Set to true if your CSV has a header row
  complete: (results) => {
    const dataArray = results.data; // Your CSV data as an array of objects
    console.log(dataArray);
  },
});

// function readAndProcess() {

//   function readFile(event) {
//     let file = event.target.files;
//     let reader = new FileReader();
//     reader.onload = function(e) {
//         let highlightData = e.target.result;
//         processCSVData(highlightData);
//     }
//     reader.readAsText(file);
// }

// function processCSVData(data) {
//   let rows = data.split("\n");
//   rows.forEach(row => {
//       let columns = row.split(",");
//       // Now you can access specific columns by their index
//       console.log(columns[1]);
//       return columns;
      
//   });
// }};


SearchBar

import { json } from "d3";
import React, {useState, useCallback, useEffect} from "react";
import {FaSearch} from "react-icons/fa";
// import Papa from "papaparse";
// import "./Search";
const csvData = "https://gist.githubusercontent.com/Roshkapel/624576680ebfb97f01660d9af7a99179/raw/5f954587b95c2373c9c64e8b954125ca68a06549/SalesData.csv";

let userData;

export const SearchBar = ({setResults}) => {
  const [input, setInput] = useState([]); //asigns the input as well as the input we will search for

   
  const handleCSVData = (data) => {
    // Parse CSV data into an array
    // eslint-disable-next-line no-undef
    Papa.parse(data, {
        header: true, // Assumes the first row contains headers
        dynamicTyping: true, // Converts numeric values to numbers
        complete: function(results) {
            // The parsed data is available in results.data
            const dataArray = results.data;
            const newData = JSON.stringify(dataArray);
            userData = JSON.parse(newData);
            // console.log(dataArray);
            // Now you can use the dataArray as needed     
            return userData   
        }
       

    });
}
}
 
fetch(csvData)
    .then(response => response.text())
    .then(handleCSVData)
    .catch(error => console.error('Error fetching CSV file:', error));

  const fetchData = (value) => {
    // // fetch("https://jsonplaceholder.typicode.com/users")
    // fetch(csvData)
    // //going to use response.text() instead bcuz i dont think the response.json will work well
    // .then((response) => response.text())
    // .then((json) => {
    //   //what we now want to do is to take the input value and return the value tht matches a valuefrom within our database
    //   //to do this we will use a filtering function
      const results = userData.filter((user) => {
          return ( 
            value && 
            user && 
            user.label && 
            user.label.toLowerCase().includes(value)
            );
      });
      setResults(results)
      console.log(results)
  }

  const handleChange = (value) => {
    setInput(value)
    fetchData(value)
  }
  return (
    <div className="menu-bar">
        <a title="menu" href="" className="menu-drop">Menu</a>
        <div className="menu-dropdown">
          <a title="home" href=""></a>
          <a title="home" href=""></a>
          <a title="home" href=""></a>
        </div>
        <a title="profile" href="">Profile</a>
        <a title="profile" href="">Sign In</a>
        <a title="profile" href="">View</a>
      <div className="search-input">  
      <FaSearch id="search-icon"/>
      <input placeholder="Type to search..."
        value={input}
        onChange={(e) => handleChange(e.target.value)}
      />
      </div>
    </div>
  )
}

//we are using the useState hook to record and analyse what the user enters
//whenever the user enters a text we want to be able to fetch data from an external API
//for this we will be using fetch in the form of a json API that makes dummy calls
//whenever you have an asynchronous function (like using this json fetch with useState) you have to chain a .then on it to a wait response
//then we have to convert the response intoa format that javascript can understand.

import React, {useState, useCallback, useEffect} from "react";
import { useData } from "./useData";
import { Users } from "../SalesAnalysis/Users";

export const NewSearch = () => {
  const [query, setQuery] = useState("");

  console.log(Users.filter(sales => sales.label.includes("")))
  return (
    <div className="app" >
    <input 
      type="text" 
      placeholder="search..." 
      className="search"  
      onChange={e => setQuery(e.target.value)}
    />

    <ul className="list">
      {Users.map((user) => (
          <li key={user.value}className="listItem">{user.label}</li>
      ))}  
    </ul>
  </div>
  )
}