
export const  ColorLegend = ({colorScale,
    tickSpacing = 20,
    tickSize = 10,
    tickTextOffset= 20, 
    onHover,
    hoveredValue,
    fadeOpacity
    }) => 

   colorScale.domain().map((domainValue, i)=> 
   (      
            <g key={i} className="tick" transform={`translate(0,${i * tickSpacing})`}
                onMouseEnter={() => {onHover(domainValue);}}
                onMouseOut={() => {onHover(null);}}
                opacity={hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1}
                >
                <circle key="MyCircle" fill={colorScale(domainValue)} r={tickSize} />
                <text x={tickTextOffset} dy=".32em">{domainValue}</text>
            </g>
        ));

    
                    
   //WE WILL BE USING THE INIDIRECTIONAL FLOW APPROACH TO CREATE A HOVER EFFECT FOR OUR CLOR LEGEND
   //UNIDIRECTIONAL FLOW USES A CALL ACK FUNCTION -- OUR EVENT LISTENER IN THIS CASE ID=S CALLED onMouseEnter
   //ALSO SEE WHERE THERE IS A BUILT IN FUNCTION CALED OnMouseEnter FOR USE WHEN THE MOUSE HOVERS OVER AN ELEMENT
   //READ UP ON WHAT IS SMART COMPONENT AND DUMB COMPONENT
   
   //The color Legend is being used as a 'Dumb Component' being that it ony returns the value from the callack Function
   //But the values are defined in App JS so in essence the dumb component doesnt know wat it is returning